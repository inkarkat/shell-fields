#!/bin/bash
shopt -qs extglob

printShortUsage()
{
    local awkExpr='(AWK-EXPR | "[AWK-EXPR][+]|COMMAND")'
    local awkFieldAndExpr="[-]N $awkExpr [[-]N ...]"
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" "[-F|--field-separator FS] [-v|--assign var=val [-v ...]] [-u|--unbuffered] [-E|--coprocess-error abort|ignore [--coprocess-error-value TEXT]|restart] [-f|--function 'FUNCTION-NAME { ... }' [-f ...]] [--filter $awkExpr [-x|--filter ...]] $awkFieldAndExpr"
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "... [-i[SUFFIX]|--in-place[=SUFFIX]] $awkFieldAndExpr [--] [FILE ...] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Transform a field N (-N counted from behind) with AWK-EXPR. Application happens
in argument order from left to right; when multiple expressions target the same
field, each is applied once.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    AWK-EXPR		    Any valid expression in AWK, for example 42,
			    '"foo"', '++\$fieldNr' (fieldNr refers to N), or
			    '\$1 "(" length(\$1) ")"')
    "|COMMAND"		    Start COMMAND as a coprocess. The original contents
			    of the target field are written to COMMAND's
			    standard input, and one resulting line is read back
			    and replaces the field's contents. So command must
			    respond with one output line for each input line,
			    without buffering.
    "AWK-EXPR|COMMAND"	    Start COMMAND as a coprocess. For each target field,
			    the AWK-EXPR is written to COMMAND's standard input,
			    and one resulting line is read back and replaces
			    the field's contents.
			    So whereas |COMMAND transforms a particular field,
			    this form allows to synthesize a field from other
			    fields.
    "[AWK-EXPR]+|COMMAND"   Start COMMAND as a coprocess in a pseudo-tty instead
			    of using pipes. This typically fools the standard
			    library into line buffering, and unblocks a hanging
			    invocation. It is more efficient and robust to force
			    line buffering via a command-line argument (e.g.
			    sed --unbuffered), or through a command like stdbuf.
    --field-separator|-F FS Use FS as the input field separator (as with AWK).
    --assign|-v var=val	    Assign the value val to the variable var; these can
			    then be used in AWK-EXPR.
    --unbuffered|-u	    Immediately output each read line.
    --coprocess-error|-E abort
			    When COMMAND fails, abort the entire processing of
			    FILE(s). This is the default behavior.
    --coprocess-error|-E ignore
			    When COMMAND fails, do not restart it; following
			    mapped fields will be empty.
    --coprocess-error-value TEXT
			    When COMMAND fails (and processing isn't aborted),
			    use TEXT for the mapped field.
    --coprocess-error|-E restart
			    When COMMAND fails, the field will be empty /
			    contain TEXT, but relaunch the COMMAND for the
			    following field, and try to resume processing.
    --function|-f 'FUNCTION-NAME { ... }'
			    Define AWK FUNCTION-NAME (for use in AWK-EXPR; when
			    a simple expression won't do).
    --filter|-x (AWK-EXPR | "[AWK-EXPR][+]|COMMAND")
			    Evaluate like a field mapping (but fieldNr is not
			    defined) and drop the entire line if the result is a
			    falsy value.
    --in-place[=SUFFIX]|-i[SUFFIX]
			    Edit FILE(s) in place (makes backup if SUFFIX
			    supplied).
EXIT STATUS:
    0	Complete success.
    1	AWK processing error.
    2	Bad invocation, wrong or missing command-line arguments.
    3	Internal error or failed assertion.

Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" "-1 '\$fieldNr \" (\" NF \")\"' -- /tmp/foobar"
}

parseExpression()
{
    local defaultSourceExpr="${1?}"; shift
    awkExpr="${1:?}"; shift
    if [[ "$awkExpr" =~ ^([^|]*[^|+]|[^|+]?)(\+?)\|(.*)$ ]]; then
	coprocs+=("${BASH_REMATCH[3]}")
	[ "${BASH_REMATCH[2]}" = '+' ] && coprocsWantingPty+=("${BASH_REMATCH[3]}")
	awkSourceExpr="${BASH_REMATCH[1]:-$defaultSourceExpr}"
	printf -v awkExpr 'pipeThrough(%s, coprocs[%d])' "$awkSourceExpr" "${#coprocs[@]}"
    fi
}

isBuffered=t
typeset -a awkCall=(awk)
typeset -a awkArgs=()
typeset -a fields=()
typeset -a expressionCode=()
typeset -a filterCode=()
typeset -a coprocs=()
typeset -a coprocsWantingPty=()
onCoprocError=abort
coprocErrorValue=
typeset -a awkVariableAssignments=()
typeset -a awkFunctions=()
isInPlace=
inPlaceExtension=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)		shift; printLongUsage "$0"; exit 0;;
	--field-separator|-F)	awkArgs+=("$1" "$2"); shift; shift;;
	--assign|-v)		awkVariableAssignments+=("$1" "${2?}"); shift; shift;;
	--unbuffered|-u)	shift; isBuffered=;;
	--coprocess-error|-E)	shift
				onCoprocError="$1"; shift
				case "$onCoprocError" in
				    abort|ignore|restart)  ;;
				    *)  { printf 'ERROR: Invalid value for --coprocess-error: %s\n' "$onCoprocError"; echo; printShortUsage "$0"; } >&2; exit 2;;
				esac
				;;
	--coprocess-error-value)
				shift; coprocErrorValue="$1"; shift;;
	--function|-f)		shift; awkFunctions+=("function $1"); shift;;
	--filter|-x)		shift
				parseExpression '$0' "$1"; shift
				filterCode+=("if (! ($awkExpr)) next")
				;;
	-i|--in-place)		isInPlace=t; shift;;
	-i?*|--in-place=*)	isInPlace=t; inPlaceExtension="${1#-i}"; inPlaceExtension="${inPlaceExtension#--in-place=}"; shift;;
	?(-)+([0-9]))		fields+=("$1")
				parseExpression '$fieldNr' "$2"
				case "$1" in
				    -*)	expressionCode+=("if (fieldNr == NF - ${1#-} + 1 && --fieldNrSequence == 0) return $awkExpr");;
				    *)	expressionCode+=("if (fieldNr == $1 && --fieldNrSequence == 0) return $awkExpr");;
				esac
				shift; shift
				;;
	--)			shift; break;;
	-*)			{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)			break;;
    esac
done
if [ ${#filterCode[@]} -eq 0 -a ${#expressionCode[@]} -eq 0 ]; then
    echo 'ERROR: No AWK-EXPR passed (for filtering or mapping).'
    echo
    printUsage "$0"
    exit 2
fi >&2
if [ "$isInPlace" ]; then
    awkCall=(gawk -i inplace -v "INPLACE_SUFFIX=$inPlaceExtension" -v "inplace::suffix=$inPlaceExtension")
fi

IFS=$'\n'
exec "${awkCall[@]}" "${awkArgs[@]}" \
    -v "isBuffered=$isBuffered" \
    -v "fieldList=${fields[*]//\\/\\\\}" \
    -v "coprocList=${coprocs[*]//\\/\\\\}" \
    -v "coprocWantingPtyList=${coprocsWantingPty[*]//\\/\\\\}" \
    -v "onCoprocError=$onCoprocError" \
    -v "coprocErrorValue=${coprocErrorValue//\\/\\\\}" \
    "${awkVariableAssignments[@]}" \
"${awkFunctions[*]}"'
function pipeThrough(input, coproc,      result)
{
    print input |& coproc
    if ((coproc |& getline result) <= 0) {
	if (onCoprocError == "abort") {
	    exit 1
	} else if (onCoprocError == "ignore") {
	    return coprocErrorValue
	} else if (onCoprocError == "restart") {
	    close(coproc)
	    return coprocErrorValue
	} else {
	    printf("ASSERT: Invalid onCoprocError: %s\n", onCoprocError) > "/dev/stderr"
	    exit 3
	}
    }
    return result
}
function evaluateExpression(fieldNr, fieldNrSequence)
{
'"${expressionCode[*]}"'
    printf "ASSERT: Expression for field %d did not match.", fieldNr > "/dev/stderr"
    exit(3)
}
function getFieldNr(field)
{
    field = 0 + field
    return (field < 0 ? NF + field + 1 : field)
}
function insert(fieldNr, expression,      i)
{
    for (i = NF; i > fieldNr; --i) {
	$(i + 1) = $i
    }
    $(fieldNr + 1) = expression
}
BEGIN {
    # Return dict sorted by fieldNumbers, from right to left.
    PROCINFO["sorted_in"] = "@ind_num_desc"

    N = split(fieldList, fields, "\n")
    coprocNum = split(coprocList, coprocs, "\n")

    coprocWantingPtyNum = split(coprocWantingPtyList, coprocsWantingPty, "\n")
    for (c = 1; c <= coprocWantingPtyNum; ++c) {
	PROCINFO[coprocsWantingPty[c], "pty"] = 1
    }
}
END {
    for (c = 1; c <= coprocNum; ++c) {
	close(coprocs[c])
    }
}
NR == 1 {
    # Use FS as output separator; it cannot be a regular expression here.
    firstTwoFields = $1 FS $2
    if (NF < 2 || substr($0, 1, length(firstTwoFields)) == firstTwoFields) {
	OFS = FS
    } else if (FS == " ") {
	OFS = ((substr($0, 1, length(firstTwoFields)) == $1 "\t" $2) ? "\t" : " ")
    } else {
	print "ERROR: The field separator has to be a literal string; it cannot be a regular expression." > "/dev/stderr"
	exit 2
    }
}
{
'"${filterCode[*]}"'
    delete fieldNrSequences
    for (n = 1; n <= N; ++n) {
	fieldNr = getFieldNr(fields[n])
	if (fieldNr >= 1) {
	    $fieldNr = evaluateExpression(fieldNr, ++fieldNrSequences[fieldNr])
	}
    }

    print
    if (! isBuffered) fflush()
}
' "$@"
